class Transmuter
!!!134790.cpp!!!	Transmuter(in quote_increment : double, in base_increment : double, in min_price : Event::Price, in max_price : Event::Price, in start : Event::Timestamp, in end : Event::Timestamp)
quote_precision_ = -std::floor(std::log10(quote_increment));
base_precision_ = -std::floor(std::log10(base_increment));
!!!134918.cpp!!!	transmute(in input_file : string) : void
std::ifstream input(input_file);
std::string line;
std::getline(input, line); // Header
VecOfEvents episode{};
std::map<Event::Price, Event::Volume> buys{}, sells{};
ob_.reset();
while (std::getline(input, line)) {
  try {
    Event event{line};
    // BOOST_LOG_TRIVIAL(debug) << event.toString();
    if (!event.deleted()) {
      if (!episode.empty() &&
          episode.back().timestamp() != event.timestamp()){
        for(auto trade : buys)
          if (trade.first >= min_price_ && trade.first <= max_price_ && episode.back().timestamp() >= start_ && episode.back().timestamp() <= end_)
            trades_output_ << date::format("%FT%TZ", episode.back().timestamp())
                           << "," << std::fixed
                           << std::setprecision(quote_precision_) << trade.first
                           << "," << std::setprecision(base_precision_)
                           << trade.second << "\n";
        for(auto trade : sells)
          if (trade.first >= min_price_ && trade.first <= max_price_ && episode.back().timestamp() >= start_ && episode.back().timestamp() <= end_)
            trades_output_ << date::format("%FT%TZ", episode.back().timestamp())
                           << "," << std::fixed
                           << std::setprecision(quote_precision_) << trade.first
                           << "," << std::setprecision(base_precision_)
                           << trade.second << "\n";
        for (auto &r : ob_.update(std::move(episode)))
          output(r);
        buys.clear();
        sells.clear();
        episode.clear();
      }
      if (event.trade()) {
        if (event.change() > 0)
          buys[event.price()] += event.change();
        else
          sells[event.price()] += event.change();
      }
      episode.push_back(std::move(event));
    }
    else {
      BOOST_LOG_TRIVIAL(warning) << "Skipped a deleted event (deleted=1)";
      BOOST_LOG_TRIVIAL(warning) << line;
    }
  } catch (const std::exception &e) {
    BOOST_LOG_TRIVIAL(warning) << "Exception: " << e.what();
    BOOST_LOG_TRIVIAL(warning) << line;
  }
}
Event::Timestamp last = episode.front().timestamp();
for (auto &r : ob_.update(std::move(episode)))
  output(r);

for (auto &r : ob_.update(last))
  output(r);
!!!219910.cpp!!!	output(in r : Stripe) : void
std::ofstream *stream;
if (r.volume() > 0)
  stream = &bids_output_;
else
  stream = &asks_output_;

if (r.price() >= min_price_ && r.price() <= max_price_ && r.start() <= end_ && r.start() + r.duration() >= start_) {
  Event::Timestamp start;
  Stripe::seconds duration;
  if(r.start() < start_) {
    start = start_;
    duration = r.start() + r.duration() - start_;
  }
  else {
    start = r.start();
    duration = r.duration();
  }

  if(start + duration >= end_)
    duration = end_ - start;

  *stream << date::format("%FT%TZ", start) << "," << std::fixed
          << std::setprecision(quote_precision_) << r.price() << ","
          << std::setprecision(6) << duration.count() << ",0,"
          << std::setprecision(base_precision_) << r.volume() << "\n";
  if (r.isBest()) {
    std::ofstream *stream;
    if (r.volume() > 0)
      stream = &best_bids_output_;
    else
      stream = &best_asks_output_;
    *stream << date::format("%FT%TZ", start) << "," << std::fixed
            << std::setprecision(quote_precision_) << r.price() << ","
            << std::setprecision(6) << duration.count() << ",0,"
            << std::setprecision(base_precision_) << r.volume() << "\n";
  }
}
