class Transmuter
!!!134918.cpp!!!	transmute(in input_file : string) : void
std::ifstream input(input_file);
std::string line;
std::getline(input, line); // Header
VecOfEvents episode{};
ob_.reset();
while (std::getline(input, line)) {
  try {
    Event event{line};
    if(event.getTradeId()) {
      trades_output_ << line << "\n";
    }
    if (episode.empty() ||
        episode.back().getTimestamp() == event.getTimestamp())
      episode.push_back(std::move(event));
    else {
      for (auto &r : ob_.update(std::move(episode)))
        output(r);
      episode.push_back(std::move(event));
    }
  } catch (const std::exception &e) {
    BOOST_LOG_TRIVIAL(warning) << e.what();
    BOOST_LOG_TRIVIAL(warning) << line;
  }
}
Event::Timestamp last = episode.front().getTimestamp();
for (auto &r : ob_.update(std::move(episode)))
  output(r);

for(auto &r : ob_.update(last))
  output(r);
!!!219910.cpp!!!	output(in r : Stripe) : void
std::ofstream *stream;
if (r.getVolume() > 0)
  stream = &bids_output_;
else
  stream = &asks_output_;
*stream << date::format("%FT%TZ", r.getStart()) << "," << std::fixed
        << std::setprecision(3) << r.getPrice() << "," << std::setprecision(6)
        << r.getDuration().count() << ",0," << r.getVolume() << "\n";
if (r.isBest()) {
  std::ofstream *stream;
  if (r.getVolume() > 0)
    stream = &best_bids_output_;
  else
    stream = &best_asks_output_;
  *stream << date::format("%FT%TZ", r.getStart()) << "," << std::fixed
          << std::setprecision(3) << r.getPrice() << "," << std::setprecision(6)
          << r.getDuration().count() << ",0," << r.getVolume() << "\n";
}
