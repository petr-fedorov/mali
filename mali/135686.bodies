class Transmuter
!!!134790.cpp!!!	Transmuter(in quote_increment : double, in base_increment : double)
quote_precision_ = -std::floor(std::log10(quote_increment));
base_precision_ = -std::floor(std::log10(base_increment));
!!!134918.cpp!!!	transmute(in input_file : string) : void
std::ifstream input(input_file);
std::string line;
std::getline(input, line); // Header
VecOfEvents episode{};
std::map<Event::Price, Event::Volume> buys{}, sells{};
ob_.reset();
while (std::getline(input, line)) {
  try {
    Event event{line};
    // BOOST_LOG_TRIVIAL(debug) << event.toString();
    if (!event.deleted()) {
      if (episode.empty() ||
          episode.back().timestamp() == event.timestamp()){
        if (event.trade()) {
          if(event.change() > 0)
            buys[event.price()] += event.change();
          else
            sells[event.price()] += event.change();
        }
        episode.push_back(std::move(event));
      }
      else {
        for(auto trade : buys)
          trades_output_ << date::format("%FT%TZ", episode.back().timestamp()) << ","
                         << std::fixed << std::setprecision(quote_precision_)
                         << trade.first << ","
                         << std::setprecision(base_precision_) << trade.second
                         << "\n";
        for(auto trade : sells)
          trades_output_ << date::format("%FT%TZ", episode.back().timestamp()) << ","
                         << std::fixed << std::setprecision(quote_precision_)
                         << trade.first << ","
                         << std::setprecision(base_precision_) << trade.second
                         << "\n";
        buys.clear();
        sells.clear();
        for (auto &r : ob_.update(std::move(episode)))
          output(r);
        episode.push_back(std::move(event));
      }
    }
    else {
      BOOST_LOG_TRIVIAL(warning) << "Skipped a deleted event (deleted=1)";
      BOOST_LOG_TRIVIAL(warning) << line;
    }
  } catch (const std::exception &e) {
    BOOST_LOG_TRIVIAL(warning) << "Exception: " << e.what();
    BOOST_LOG_TRIVIAL(warning) << line;
  }
}
Event::Timestamp last = episode.front().timestamp();
for (auto &r : ob_.update(std::move(episode)))
  output(r);

for (auto &r : ob_.update(last))
  output(r);
!!!219910.cpp!!!	output(in r : Stripe) : void
std::ofstream *stream;
if (r.volume() > 0)
  stream = &bids_output_;
else
  stream = &asks_output_;
*stream << date::format("%FT%TZ", r.start()) << "," << std::fixed
        << std::setprecision(quote_precision_) << r.price() << "," << std::setprecision(6)
        << r.duration().count() << ",0," << std::setprecision(base_precision_) << r.volume() << "\n";
if (r.isBest()) {
  std::ofstream *stream;
  if (r.volume() > 0)
    stream = &best_bids_output_;
  else
    stream = &best_asks_output_;
  *stream << date::format("%FT%TZ", r.start()) << "," << std::fixed
          << std::setprecision(quote_precision_) << r.price() << "," << std::setprecision(6)
          << r.duration().count() << ",0,"<< std::setprecision(base_precision_) << r.volume() << "\n";
}
